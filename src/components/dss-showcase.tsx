
"use client";

import React from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Bot, Zap, SkipForward, Ban, Play, Percent, LineChart, Waypoints, AlertTriangle } from 'lucide-react';
import { Button } from './ui/button';
import { ScrollArea, ScrollBar } from './ui/scroll-area';
import { Progress } from './ui/progress';

const showcaseSuggestions = [
  {
    suggestionId: 'showcase-1',
    conflictId: 'NDLS-12951-59012',
    trains: ['Mumbai Rajdhani', 'NDLS-AGC Freight'],
    stationCode: 'NDLS',
    platform: '3',
    action: 'Hold',
    suggestedFirst: '12951',
    reason: 'Mumbai Rajdhani has higher priority (Rajdhani) and greater passenger count (1200). Holding the freight train minimizes passenger delay.',
    estimatedPassengerDelaySavedMin: 12,
    confidencePercent: 98,
  },
  {
    suggestionId: 'showcase-2',
    conflictId: 'AGC-12301-11041',
    trains: ['Howrah Rajdhani', 'Agra Express'],
    stationCode: 'AGC',
    platform: '1',
    action: 'Proceed',
    suggestedFirst: '12301',
    reason: 'Howrah Rajdhani is a high-priority train. Allowing it to proceed maintains its schedule and avoids cascading delays on the main line.',
    estimatedPassengerDelaySavedMin: 8,
    confidencePercent: 95,
  },
  {
    suggestionId: 'showcase-3',
    conflictId: 'MTJ-12952-19024',
    trains: ['Jaipur SF', 'Firozpur Janata'],
    stationCode: 'MTJ',
    platform: '2',
    action: 'Reroute',
    suggestedFirst: '12952',
    reason: 'Minor platform conflict. Rerouting Jaipur SF to Platform 4 avoids a 15-minute halt for both trains, saving significant time.',
    estimatedPassengerDelaySavedMin: 25,
    confidencePercent: 92,
  },
   {
    suggestionId: 'showcase-4',
    conflictId: 'AGC-97014-11041',
    trains: ['Delhi-Agra Local', 'Agra Express'],
    stationCode: 'AGC',
    platform: '5',
    action: 'Hold',
    suggestedFirst: '11041',
    reason: 'Agra Express has a higher passenger load and is already running slightly behind schedule. Prioritizing it prevents further delay accumulation.',
    estimatedPassengerDelaySavedMin: 5,
    confidencePercent: 88,
  },
];


const getActionIcon = (action: string) => {
  switch (action) {
    case 'Proceed':
      return <Play className="h-4 w-4 text-green-500" />;
    case 'Hold':
      return <Ban className="h-4 w-4 text-yellow-500" />;
    case 'Reroute':
      return <SkipForward className="h-4 w-4 text-purple-500" />;
    default:
      return <Bot className="h-4 w-4" />;
  }
};

const getActionBadgeVariant = (action: string) => {
    switch(action) {
        case 'Proceed': return 'default';
        case 'Hold': return 'secondary';
        case 'Reroute': return 'destructive';
        default: return 'outline';
    }
}


export function DssShowcase() {
  return (
    <Card className="w-full bg-secondary/50 border-2 border-primary/20 shadow-xl">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-xl">
          <Zap className="text-primary"/> AI Decision Feed Showcase
        </CardTitle>
        <CardDescription>A glimpse into the real-time operational recommendations generated by our DSS.</CardDescription>
      </CardHeader>
      <CardContent className="p-0">
        <ScrollArea className="w-full whitespace-nowrap">
          <div className="flex w-max space-x-4 p-4">
            {showcaseSuggestions.map((rec) => (
                <Card key={rec.suggestionId} className='shadow-md w-96 shrink-0 flex flex-col bg-background transform transition-transform hover:-translate-y-1'>
                    <CardHeader className="pb-3">
                        <CardTitle className="flex flex-col justify-between items-start gap-2">
                             <div className="flex justify-between w-full items-start">
                                <span className="text-sm whitespace-normal">Conflict: {rec.trains.join(' vs ')}</span>
                                <Badge variant={getActionBadgeVariant(rec.action)} className="ml-2 shrink-0">
                                    {getActionIcon(rec.action)}
                                    <span className="ml-1">Action: {rec.action}</span>
                                </Badge>
                             </div>
                        </CardTitle>
                        <CardDescription>Location: {rec.stationCode} - Platform {rec.platform}</CardDescription>
                    </CardHeader>
                    <CardContent className="text-sm space-y-3 flex-grow">
                        <p className="whitespace-normal"><b>Reason:</b> <span className="text-muted-foreground">{rec.reason}</span></p>
                        <p><b>Impact:</b> <span className="font-semibold text-green-600">Save ~{rec.estimatedPassengerDelaySavedMin} min total delay</span></p>
                        <div className="flex items-center gap-2">
                           <b>Confidence:</b>
                           <Progress value={rec.confidencePercent} className="w-24 h-2" />
                           <span className='font-semibold'>{rec.confidencePercent}%</span>
                        </div>
                    </CardContent>
                </Card>
            ))}
          </div>
          <ScrollBar orientation="horizontal" />
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
